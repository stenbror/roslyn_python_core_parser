
use super::token_nodes::Token;

pub enum SyntaxNode {
    /* Expression nodes */
    NamedExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    TestExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    LambdaExprNode(u32, u32, Box<Token>, Option<Box<SyntaxNode>>, Box<Token>, Box<SyntaxNode>, bool),
    OrTestExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    AndTestExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    NotTestExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    CompareLessExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareLessEqualExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareGreaterExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareGreaterEqualExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareEqualExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareNotEqualExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareInEqualExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareNotInExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareIsExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    CompareIsNotExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    OrExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    XorExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    AndExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    ShiftLeftExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    ShiftRightExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    PlusExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    MinusExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    MulExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    DivExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    ModuloExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    MatricesExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    FloorDivExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    UnaryPlusExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    UnaryMinusExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    UnaryBitInvertExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    PowerExprNode(u32, u32, Box<SyntaxNode>, Box<Token>, Box<SyntaxNode>),
    AtomExprNode(u32, u32, Option<Box<Token>>, Box<SyntaxNode>, Vec::<Box<SyntaxNode>>),
    NameExprNode(u32, u32, Box<str>),
    NumberExprNode(u32, u32, Box<str>),
    StringExprNode(u32, u32, Vec::<Box<str>>),
    EllipsisExprNode(u32, u32),
    NoneExprNode(u32, u32),
    FalseExprNode(u32, u32),
    TrueExprNode(u32, u32),
    TupleExprNode(u32, u32, Box<Token>, Vec<Box<SyntaxNode>>, Box<Token>),
    ListExprNode(u32, u32, Box<Token>, Vec<Box<SyntaxNode>>, Box<Token>),
    DictExprNode(u32, u32, Box<Token>, Vec<Box<SyntaxNode>>, Box<Token>),
    SetExprNode(u32, u32, Box<Token>, Vec<Box<SyntaxNode>>, Box<Token>),
    DictionaryEntryNode(u32, u32, Box<Token>, Box<Token>, Box<SyntaxNode>),
    DictionaryReferenceNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    SetReferenceNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    TestListComprehensionExprNode(u32, u32, Vec::<Box<SyntaxNode>>, Vec::<Box<Token>>),
    TrailerDotNameExprNode(u32, u32, Box<Token>, Box<Token>),
    TrailerCallExprNode(u32, u32, Box<Token>, Box<SyntaxNode>, Box<Token>),
    TrailerIndexExprNode(u32, u32, Box<Token>, Box<SyntaxNode>, Box<Token>),
    SubscriptListExprNode(u32, u32, Vec::<Box<SyntaxNode>>, Vec::<Box<SyntaxNode>>),
    SubscriptExprNode(u32, u32, Option<Box<SyntaxNode>>, Option<Box<Token>>, Option<Box<SyntaxNode>>, Option<Box<Token>>, Option<Box<SyntaxNode>>),
    ExprListExprNode(u32, u32, Vec<Box<SyntaxNode>>, Vec<Box<SyntaxNode>>),
    TestListExprNode(u32, u32, Vec<Box<SyntaxNode>>, Vec<Box<SyntaxNode>>),
    ArgListExprNode(u32, u32, Vec<Box<SyntaxNode>>, Vec<Box<SyntaxNode>>),
    ArgumentExprNode(u32, u32, Box<SyntaxNode>, Option<Box<Token>>, Option<Box<SyntaxNode>>),
    MulArgumentExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    PowerArgumentExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    SyncCompForExprNode(u32, u32, Box<Token>, Box<SyntaxNode>, Box<Token>, Option<Box<SyntaxNode>>),
    CompForExprNode(u32, u32, Box<Token>, Option<Box<SyntaxNode>>),
    CompIfExprNode(u32, u32, Box<Token>, Box<SyntaxNode>, Option<Box<SyntaxNode>>),
    YieldExprNode(u32, u32, Box<Token>, Box<SyntaxNode>),
    YieldFromExprNode(u32, u32, Box<Token>, Box<Token>, Box<SyntaxNode>),

    /* Statement nodes */
}